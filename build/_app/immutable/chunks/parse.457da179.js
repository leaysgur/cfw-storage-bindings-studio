var y=Object.defineProperty;var u=(o,f)=>y(o,"name",{value:f,configurable:!0});const w=-1,g=-2,p=-3,A=-4,O=-5,T=-6;function k(o,f){return b(JSON.parse(o),f)}u(k,"parse");function b(o,f){if(typeof o=="number")return s(o,!0);if(!Array.isArray(o)||o.length===0)throw new Error("Invalid input");const l=o,r=Array(l.length);function s(n,i=!1){if(n===-1)return;if(n===-3)return NaN;if(n===-4)return 1/0;if(n===-5)return-1/0;if(n===-6)return-0;if(i)throw new Error("Invalid input");if(n in r)return r[n];const t=l[n];if(!t||typeof t!="object")r[n]=t;else if(Array.isArray(t))if(typeof t[0]=="string"){const c=t[0],a=f==null?void 0:f[c];if(a)return r[n]=a(s(t[1]));switch(c){case"Date":r[n]=new Date(t[1]);break;case"Set":const I=new Set;r[n]=I;for(let e=1;e<t.length;e+=1)I.add(s(t[e]));break;case"Map":const N=new Map;r[n]=N;for(let e=1;e<t.length;e+=2)N.set(s(t[e]),s(t[e+1]));break;case"RegExp":r[n]=new RegExp(t[1],t[2]);break;case"Object":r[n]=Object(t[1]);break;case"BigInt":r[n]=BigInt(t[1]);break;case"null":const E=Object.create(null);r[n]=E;for(let e=1;e<t.length;e+=2)E[t[e]]=s(t[e+1]);break;default:throw new Error(`Unknown type ${c}`)}}else{const c=new Array(t.length);r[n]=c;for(let a=0;a<t.length;a+=1){const I=t[a];I!==-2&&(c[a]=s(I))}}else{const c={};r[n]=c;for(const a in t){const I=t[a];c[a]=s(I)}}return r[n]}return u(s,"hydrate"),s(0)}u(b,"unflatten");export{g as H,p as N,A as P,w as U,O as a,T as b,k as p,b as u};
